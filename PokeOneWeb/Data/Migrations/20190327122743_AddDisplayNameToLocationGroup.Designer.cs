// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokeOneWeb.Data;

namespace PokeOneWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190327122743_AddDisplayNameToLocationGroup")]
    partial class AddDisplayNameToLocationGroup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Ability", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Ability");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BagCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("BagCategory");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ElementalType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryTypeId");

                    b.Property<int?>("SecondaryTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryTypeId");

                    b.HasIndex("SecondaryTypeId");

                    b.ToTable("ElementalTypeCombination");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeDamageRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AttackEffectivity");

                    b.Property<int>("AttackingTypeId");

                    b.Property<int>("DefendingTypeId");

                    b.HasKey("Id");

                    b.HasIndex("AttackingTypeId");

                    b.HasIndex("DefendingTypeId");

                    b.ToTable("ElementalTypeDamageRelation");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("RegionId")
                        .IsUnique();

                    b.ToTable("Event");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FruitTreeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FruitTreeType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FunctionalNpcType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FunctionName");

                    b.HasKey("Id");

                    b.ToTable("FunctionalNpcType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.GloballyObtainableItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("ItemObtainMethodId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ItemObtainMethodId");

                    b.ToTable("GloballyObtainableItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BagCategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("BagCategoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("ItemId");

                    b.Property<int>("NpcId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("NpcId");

                    b.ToTable("ItemGift");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemObtainMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemObtainMethod");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAvailable");

                    b.Property<int>("LearnMethod");

                    b.Property<int>("MoveId");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.ToTable("LearnableMove");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("InGameAreaName");

                    b.Property<bool>("IsAccessible");

                    b.Property<bool>("IsDiscoverable");

                    b.Property<int>("LocationGroupId");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.Property<int?>("SignificantPokemonSpeciesVarietyId");

                    b.HasKey("Id");

                    b.HasIndex("LocationGroupId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SignificantPokemonSpeciesVarietyId");

                    b.ToTable("Location");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DisplayName");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("LocationGroup");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("LocationId");

                    b.Property<string>("Notes");

                    b.Property<string>("PlacementDescription");

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LocationInteraction");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Map", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageHeight");

                    b.Property<int>("ImageWidth");

                    b.Property<int?>("LocationGroupId");

                    b.Property<int>("MaxZoomLevel");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("LocationGroupId");

                    b.ToTable("Map");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MapLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("LocationId");

                    b.Property<int>("MapId");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("MapId");

                    b.ToTable("MapLocation");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Accuracy");

                    b.Property<int>("ElementalTypeId");

                    b.Property<int>("MoveDamageClass");

                    b.Property<string>("Name");

                    b.Property<int>("PP");

                    b.Property<int?>("Strength");

                    b.HasKey("Id");

                    b.HasIndex("ElementalTypeId");

                    b.ToTable("Move");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveTutorMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MoveTutorId");

                    b.Property<int>("TaughtMoveId");

                    b.HasKey("Id");

                    b.HasIndex("MoveTutorId");

                    b.HasIndex("TaughtMoveId");

                    b.ToTable("MoveTutorMove");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AbilityId");

                    b.Property<bool>("DoesLevelIncrease");

                    b.Property<bool>("IsCatchable");

                    b.Property<int>("Level")
                        .HasColumnName("Level");

                    b.Property<int>("MaxLevel");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.HasKey("Id");

                    b.HasIndex("AbilityId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsGuaranteed");

                    b.Property<int>("ItemId");

                    b.Property<int>("PokemonId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NpcId");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.HasKey("Id");

                    b.HasIndex("NpcId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.ToTable("PokemonGift");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MoveId");

                    b.Property<int>("PokemonId");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonMove");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonNpcType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PokemonNpcType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsConfirmed");

                    b.Property<string>("Notes");

                    b.Property<int>("PokemonSpawnPointId");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.Property<int>("SpawnRarityId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpawnPointId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.HasIndex("SpawnRarityId");

                    b.ToTable("PokemonSpawn");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnPointType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("PokemonSpawnPointType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnTimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PokemonSpawnId");

                    b.Property<int>("TimeOfDayId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpawnId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("PokemonSpawnTimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Availability");

                    b.Property<int>("DefaultVarietyId");

                    b.Property<string>("Name");

                    b.Property<int>("PokedexNumber");

                    b.HasKey("Id");

                    b.HasIndex("DefaultVarietyId");

                    b.HasIndex("PokedexNumber")
                        .IsUnique();

                    b.ToTable("PokemonSpecies");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Availability");

                    b.Property<int>("BaseStatsId");

                    b.Property<int>("DefaultFormId");

                    b.Property<int>("ElementalTypeCombinationId");

                    b.Property<int>("EvYieldId");

                    b.Property<int>("HiddenAbilityId");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("PokemonSpeciesId");

                    b.Property<int>("PrimaryAbilityId");

                    b.Property<int>("SecondaryAbilityId");

                    b.HasKey("Id");

                    b.HasIndex("BaseStatsId");

                    b.HasIndex("DefaultFormId");

                    b.HasIndex("ElementalTypeCombinationId");

                    b.HasIndex("EvYieldId");

                    b.HasIndex("HiddenAbilityId");

                    b.HasIndex("PokemonSpeciesId");

                    b.HasIndex("PrimaryAbilityId");

                    b.HasIndex("SecondaryAbilityId");

                    b.ToTable("PokemonSpeciesVariety");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVarietyDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.ToTable("PokemonSpeciesVarietyDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVarietyForm", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Artwork");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.Property<string>("ShinyArtwork");

                    b.Property<string>("Sprite");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.ToTable("PokemonSpeciesVarietyForm");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HumanNpcId");

                    b.Property<int>("PokemonSpeciesVarietyId");

                    b.Property<int>("PokemonTradeType");

                    b.Property<int?>("PriceInCoins");

                    b.Property<int?>("PriceInPokeDollar");

                    b.Property<int>("TradeForSpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("HumanNpcId");

                    b.HasIndex("PokemonSpeciesVarietyId");

                    b.HasIndex("TradeForSpeciesId");

                    b.ToTable("PokemonTrade");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("ExperienceReward");

                    b.Property<string>("From");

                    b.Property<int?>("LocationId");

                    b.Property<int>("MoneyReward");

                    b.Property<int>("QuestType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestItemReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("QuestId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("QuestId");

                    b.ToTable("QuestItemReward");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEventRegion");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.SpawnRarity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("SpawnRarity");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Stats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attack");

                    b.Property<int>("Defense");

                    b.Property<int>("Hp");

                    b.Property<int>("SpecialAttack");

                    b.Property<int>("SpecialDefense");

                    b.Property<int>("Speed");

                    b.HasKey("Id");

                    b.ToTable("Stats");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Finish");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("TimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsGuaranteed");

                    b.Property<int>("ItemId");

                    b.Property<int>("TrainerId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PokemonId");

                    b.Property<int>("TrainerId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TrainerType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FruitTree", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<int>("FruitItemId")
                        .HasColumnName("FruitTree_FruitItemId");

                    b.Property<int>("FruitTreeTypeId")
                        .HasColumnName("FruitTree_TypeId");

                    b.HasIndex("FruitItemId");

                    b.HasIndex("FruitTreeTypeId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("FruitTree");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Npc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");


                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("Npc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<bool>("IsHidden")
                        .HasColumnName("PlacedItem_IsHidden");

                    b.Property<int?>("ItemId")
                        .HasColumnName("PlacedItem_ItemId");

                    b.HasIndex("ItemId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("PlacedItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnPoint", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<int>("PokemonSpawnPointTypeId")
                        .HasColumnName("PokemonSpawnPoint_PokemonSpawnPointTypeId");

                    b.HasIndex("PokemonSpawnPointTypeId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("PokemonSpawnPoint");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Portal", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<string>("Label")
                        .HasColumnName("Portal_Label");

                    b.Property<int>("TargetLocationId")
                        .HasColumnName("Portal_TargetLocationId");

                    b.HasIndex("TargetLocationId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("Portal");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.HumanNpc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.Npc");

                    b.Property<string>("Name")
                        .HasColumnName("HumanNpc_Name");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("HumanNpc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonNpc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.Npc");

                    b.Property<int>("PokemonId")
                        .HasColumnName("PokemonNpc_PokemonId");

                    b.Property<int>("PokemonNpcTypeId")
                        .HasColumnName("PokemonNpc_PokemonNpcTypeId");

                    b.HasIndex("PokemonId")
                        .IsUnique()
                        .HasFilter("[PokemonNpc_PokemonId] IS NOT NULL");

                    b.HasIndex("PokemonNpcTypeId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("PokemonNpc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FunctionalNpc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.HumanNpc");

                    b.Property<int>("FunctionalNpcTypeId")
                        .HasColumnName("FunctionalNpc_FunctionalNpcTypeId");

                    b.HasIndex("FunctionalNpcTypeId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("FunctionalNpc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Trainer", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.HumanNpc");

                    b.Property<int>("ExperienceReward")
                        .HasColumnName("Trainer_ExperienceReward");

                    b.Property<int>("MoneyReward")
                        .HasColumnName("Trainer_MoneyReward");

                    b.Property<int>("TrainerTypeId")
                        .HasColumnName("Trainer_TrainerTypeId");

                    b.HasIndex("TrainerTypeId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("Trainer");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossPokemon", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.PokemonNpc");

                    b.Property<int>("ExperienceReward")
                        .HasColumnName("BossPokemon_ExperienceReward");

                    b.Property<int>("MoneyReward")
                        .HasColumnName("BossPokemon_MoneyReward");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("BossPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveTutor", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.FunctionalNpc");


                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator().HasValue("MoveTutor");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeCombination", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "PrimaryType")
                        .WithMany()
                        .HasForeignKey("PrimaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "SecondaryType")
                        .WithMany()
                        .HasForeignKey("SecondaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeDamageRelation", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "AttackingType")
                        .WithMany("AttackDamageRelations")
                        .HasForeignKey("AttackingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "DefendingType")
                        .WithMany("DefenseDamageRelations")
                        .HasForeignKey("DefendingTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Event", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Region", "Region")
                        .WithOne("Event")
                        .HasForeignKey("PokeOneWeb.Data.Entities.Event", "RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.GloballyObtainableItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("GloballyObtainableItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.ItemObtainMethod", "ItemObtainMethod")
                        .WithMany("GloballyObtainableItems")
                        .HasForeignKey("ItemObtainMethodId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.BagCategory", "BagCategory")
                        .WithMany("Items")
                        .HasForeignKey("BagCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemGift", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("ItemGifts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Npc", "Npc")
                        .WithMany("ItemGifts")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LearnableMove", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("LearnableMoves")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.LocationGroup", "LocationGroup")
                        .WithMany("Locations")
                        .HasForeignKey("LocationGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Region", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "SignificantPokemonSpeciesVariety")
                        .WithMany()
                        .HasForeignKey("SignificantPokemonSpeciesVarietyId");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationInteraction", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("LocationInteractions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Map", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.LocationGroup", "LocationGroup")
                        .WithMany("Maps")
                        .HasForeignKey("LocationGroupId");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MapLocation", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Map", "Map")
                        .WithMany("MapLocations")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Move", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "ElementalType")
                        .WithMany("Moves")
                        .HasForeignKey("ElementalTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.MoveTutorMove", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.MoveTutor", "MoveTutor")
                        .WithMany("MoveTutorMoves")
                        .HasForeignKey("MoveTutorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Move", "TaughtMove")
                        .WithMany()
                        .HasForeignKey("TaughtMoveId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Pokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "Ability")
                        .WithMany("Pokemon")
                        .HasForeignKey("AbilityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("Pokemon")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByPokemon")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany("PokemonDropItems")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonGift", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Npc", "Npc")
                        .WithMany("PokemonGifts")
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("PokemonGifts")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonMove", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany("PokemonMoves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawn", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpawnPoint", "PokemonSpawnPoint")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("PokemonSpawnPointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.SpawnRarity", "SpawnRarity")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("SpawnRarityId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnTimeOfDay", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpawn", "PokemonSpawn")
                        .WithMany("TimesOfDay")
                        .HasForeignKey("PokemonSpawnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "DefaultVariety")
                        .WithMany()
                        .HasForeignKey("DefaultVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "BaseStats")
                        .WithMany()
                        .HasForeignKey("BaseStatsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVarietyForm", "DefaultForm")
                        .WithMany()
                        .HasForeignKey("DefaultFormId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalTypeCombination", "ElementalTypeCombination")
                        .WithMany("PokemonSpeciesVarieties")
                        .HasForeignKey("ElementalTypeCombinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Stats", "EvYield")
                        .WithMany()
                        .HasForeignKey("EvYieldId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "HiddenAbility")
                        .WithMany("PokemonSpeciesVarietiesAsHiddenAbility")
                        .HasForeignKey("HiddenAbilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("Varieties")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "PrimaryAbility")
                        .WithMany("PokemonSpeciesVarietiesAsPrimaryAbility")
                        .HasForeignKey("PrimaryAbilityId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.Ability", "SecondaryAbility")
                        .WithMany("PokemonSpeciesVarietiesAsSecondaryAbility")
                        .HasForeignKey("SecondaryAbilityId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVarietyDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByPokemonSpeciesVarieties")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("ItemDrops")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesVarietyForm", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("Forms")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonTrade", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.HumanNpc", "HumanNpc")
                        .WithMany("PokemonTrades")
                        .HasForeignKey("HumanNpcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "PokemonSpeciesVariety")
                        .WithMany("PokemonTrades")
                        .HasForeignKey("PokemonSpeciesVarietyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpeciesVariety", "TradeForSpeciesVariety")
                        .WithMany()
                        .HasForeignKey("TradeForSpeciesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("Quests")
                        .HasForeignKey("LocationId");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.QuestItemReward", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("QuestRewards")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Quest", "Quest")
                        .WithMany("ItemRewards")
                        .HasForeignKey("QuestId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByTrainers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerDropItems")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerPokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerPokemon")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FruitTree", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "FruitItem")
                        .WithMany("FruitTrees")
                        .HasForeignKey("FruitItemId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.FruitTreeType", "FruitTreeType")
                        .WithMany("FruitTrees")
                        .HasForeignKey("FruitTreeTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("PlacedItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnPoint", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpawnPointType", "PokemonSpawnPointType")
                        .WithMany("PokemonSpawnPoints")
                        .HasForeignKey("PokemonSpawnPointTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Portal", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "TargetLocation")
                        .WithMany()
                        .HasForeignKey("TargetLocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonNpc", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithOne("PokemonNpc")
                        .HasForeignKey("PokeOneWeb.Data.Entities.PokemonNpc", "PokemonId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonNpcType", "PokemonNpcType")
                        .WithMany("PokemonNpcs")
                        .HasForeignKey("PokemonNpcTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FunctionalNpc", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.FunctionalNpcType", "FunctionalNpcType")
                        .WithMany("FunctionalNpcs")
                        .HasForeignKey("FunctionalNpcTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Trainer", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.TrainerType", "TrainerType")
                        .WithMany("Trainers")
                        .HasForeignKey("TrainerTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
