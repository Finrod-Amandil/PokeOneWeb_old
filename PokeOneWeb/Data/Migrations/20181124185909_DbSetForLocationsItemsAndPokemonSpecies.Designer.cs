// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PokeOneWeb.Data;

namespace PokeOneWeb.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20181124185909_DbSetForLocationsItemsAndPokemonSpecies")]
    partial class DbSetForLocationsItemsAndPokemonSpecies
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossPokemonDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BossPokemonId");

                    b.Property<int>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("BossPokemonId");

                    b.HasIndex("ItemId");

                    b.ToTable("BossPokemonDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossTrainerDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BossTrainerId");

                    b.Property<int>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("BossTrainerId");

                    b.HasIndex("ItemId");

                    b.ToTable("BossTrainerDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Coordinates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("X");

                    b.Property<int>("Y");

                    b.HasKey("Id");

                    b.ToTable("Coordinates");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ElementalType");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeCombination", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PrimaryTypeId");

                    b.Property<int>("SecondaryTypeId");

                    b.HasKey("Id");

                    b.HasIndex("PrimaryTypeId");

                    b.HasIndex("SecondaryTypeId");

                    b.ToTable("ElementalTypeCombination");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.EvYield", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Attack");

                    b.Property<int>("Defense");

                    b.Property<int>("HealthPoints");

                    b.Property<int>("SpecialAttack");

                    b.Property<int>("SpecialDefense");

                    b.Property<int>("Speed");

                    b.HasKey("Id");

                    b.ToTable("EvYield");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Count");

                    b.Property<int>("HumanNpcId");

                    b.Property<int>("ItemId");

                    b.HasKey("Id");

                    b.HasIndex("HumanNpcId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemGift");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsAccessible");

                    b.Property<string>("Name");

                    b.Property<int>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationInteraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CoordinatesId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("LocationId");

                    b.Property<string>("PlacementDescription");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatesId");

                    b.HasIndex("LocationId");

                    b.ToTable("LocationInteraction");

                    b.HasDiscriminator<string>("Discriminator").HasValue("LocationInteraction");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Move");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Pokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Level");

                    b.Property<int>("PokemonSpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("Pokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonGift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HumanNpcId");

                    b.Property<int>("PokemonSpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("HumanNpcId");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonGift");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonMove", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("MoveId");

                    b.Property<int>("PokemonId");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("PokemonId");

                    b.ToTable("PokemonMove");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawn", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PokemonSpawnPointId");

                    b.Property<int>("PokemonSpeciesId");

                    b.Property<int>("SpawnRarity");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpawnPointId");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonSpawn");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnTimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PokemonSpawnId");

                    b.Property<int>("TimeOfDayId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonSpawnId");

                    b.HasIndex("TimeOfDayId");

                    b.ToTable("PokemonSpawnTimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ElementalTypeCombinationId");

                    b.Property<int>("EvYieldId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ElementalTypeCombinationId");

                    b.HasIndex("EvYieldId");

                    b.ToTable("PokemonSpecieses");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesDropItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ItemId");

                    b.Property<int>("PokemonSpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PokemonSpeciesId");

                    b.ToTable("PokemonSpeciesDropItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonTrade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HumanNpcId");

                    b.Property<int>("PokemonSpeciesId");

                    b.Property<int>("PokemonTradeType");

                    b.Property<int>("PriceInCoins");

                    b.Property<int>("TradeForSpeciesId");

                    b.HasKey("Id");

                    b.HasIndex("HumanNpcId");

                    b.HasIndex("PokemonSpeciesId");

                    b.HasIndex("TradeForSpeciesId");

                    b.ToTable("PokemonTrade");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("ExperienceReward");

                    b.Property<int>("LocationId");

                    b.Property<int>("MoneyReward");

                    b.Property<int>("NpcId");

                    b.Property<int>("QuestType");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("NpcId");

                    b.ToTable("Quest");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TimeOfDay", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Finish");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.HasKey("Id");

                    b.ToTable("TimeOfDay");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerPokemon", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("PokemonId");

                    b.Property<int>("TrainerId");

                    b.HasKey("Id");

                    b.HasIndex("PokemonId");

                    b.HasIndex("TrainerId");

                    b.ToTable("TrainerPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FruitTree", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<int>("FruitId")
                        .HasColumnName("FruitTree_FruitId");

                    b.HasIndex("FruitId");

                    b.ToTable("FruitTree");

                    b.HasDiscriminator().HasValue("FruitTree");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Npc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");


                    b.ToTable("Npc");

                    b.HasDiscriminator().HasValue("Npc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<bool>("IsHidden")
                        .HasColumnName("PlacedItem_IsHidden");

                    b.Property<int?>("PlacedItemId")
                        .HasColumnName("PlacedItem_ItemId");

                    b.HasIndex("PlacedItemId");

                    b.ToTable("PlacedItem");

                    b.HasDiscriminator().HasValue("PlacedItem");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnPoint", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<int>("Type")
                        .HasColumnName("PokemonSpawnPoint_Type");

                    b.ToTable("PokemonSpawnPoint");

                    b.HasDiscriminator().HasValue("PokemonSpawnPoint");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Portal", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.LocationInteraction");

                    b.Property<int>("TargetLocationId")
                        .HasColumnName("Portal_TargetId");

                    b.HasIndex("TargetLocationId");

                    b.ToTable("Portal");

                    b.HasDiscriminator().HasValue("Portal");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.HumanNpc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.Npc");

                    b.Property<string>("Name")
                        .HasColumnName("HumanNpc_Name");

                    b.ToTable("HumanNpc");

                    b.HasDiscriminator().HasValue("HumanNpc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonNpc", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.Npc");

                    b.Property<int>("PokemonNpcSpeciesId")
                        .HasColumnName("PokemonNpc_PokemonSpeciesId");

                    b.HasIndex("PokemonNpcSpeciesId");

                    b.ToTable("PokemonNpc");

                    b.HasDiscriminator().HasValue("PokemonNpc");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Trainer", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.HumanNpc");

                    b.Property<int>("ExperienceReward")
                        .HasColumnName("Trainer_ExperienceReward");

                    b.Property<int>("MoneyReward")
                        .HasColumnName("Trainer_MoneyReward");

                    b.Property<int>("TrainerType")
                        .HasColumnName("Trainer_TrainerType");

                    b.ToTable("Trainer");

                    b.HasDiscriminator().HasValue("Trainer");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Tutor", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.HumanNpc");

                    b.Property<int>("TutorTaughtMoveId")
                        .HasColumnName("Tutor_TaughtMoveId");

                    b.Property<int>("TutorType")
                        .HasColumnName("Tutor_TutorType");

                    b.HasIndex("TutorTaughtMoveId");

                    b.ToTable("Tutor");

                    b.HasDiscriminator().HasValue("Tutor");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossPokemon", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.PokemonNpc");

                    b.Property<int>("BossPokemonPokemonId")
                        .HasColumnName("BossPokemon_PokemonId");

                    b.Property<int>("StartLevel")
                        .HasColumnName("BossPokemon_StartLevel");

                    b.HasIndex("BossPokemonPokemonId");

                    b.ToTable("BossPokemon");

                    b.HasDiscriminator().HasValue("BossPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.StaticPokemon", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.PokemonNpc");

                    b.Property<int>("StaticPokemonPokemonId")
                        .HasColumnName("StaticPokemon_PokemonId");

                    b.HasIndex("StaticPokemonPokemonId");

                    b.ToTable("StaticPokemon");

                    b.HasDiscriminator().HasValue("StaticPokemon");
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossTrainer", b =>
                {
                    b.HasBaseType("PokeOneWeb.Data.Entities.Trainer");

                    b.Property<int>("StartLevel")
                        .HasColumnName("BossTrainer_StartLevel");

                    b.ToTable("BossTrainer");

                    b.HasDiscriminator().HasValue("BossTrainer");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossPokemonDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.BossPokemon", "BossPokemon")
                        .WithMany("Drops")
                        .HasForeignKey("BossPokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByBossPokemon")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossTrainerDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.BossTrainer", "BossTrainer")
                        .WithMany("Drops")
                        .HasForeignKey("BossTrainerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByBossTrainers")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ElementalTypeCombination", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "PrimaryType")
                        .WithMany()
                        .HasForeignKey("PrimaryTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.ElementalType", "SecondaryType")
                        .WithMany()
                        .HasForeignKey("SecondaryTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.ItemGift", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.HumanNpc", "HumanNpc")
                        .WithMany()
                        .HasForeignKey("HumanNpcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("ItemGifts")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Location", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Region", "Region")
                        .WithMany("Locations")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.LocationInteraction", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Coordinates", "Coordinates")
                        .WithMany()
                        .HasForeignKey("CoordinatesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("LocationInteractions")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Pokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("Pokemon")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonGift", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.HumanNpc", "HumanNpc")
                        .WithMany()
                        .HasForeignKey("HumanNpcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("PokemonGifts")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonMove", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Move", "Move")
                        .WithMany()
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany("Moves")
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawn", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpawnPoint", "PokemonSpawnPoint")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("PokemonSpawnPointId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("PokemonSpawns")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpawnTimeOfDay", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpawn", "PokemonSpawn")
                        .WithMany("TimesOfDay")
                        .HasForeignKey("PokemonSpawnId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.TimeOfDay", "TimeOfDay")
                        .WithMany()
                        .HasForeignKey("TimeOfDayId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpecies", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.ElementalTypeCombination", "ElementalTypeCombination")
                        .WithMany("PokemonSpecies")
                        .HasForeignKey("ElementalTypeCombinationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.EvYield", "EvYield")
                        .WithMany()
                        .HasForeignKey("EvYieldId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonSpeciesDropItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("DroppedByPokemonSpecies")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("Drops")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonTrade", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.HumanNpc", "HumanNpc")
                        .WithMany()
                        .HasForeignKey("HumanNpcId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("PokemonTrades")
                        .HasForeignKey("PokemonSpeciesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "TradeForSpecies")
                        .WithMany()
                        .HasForeignKey("TradeForSpeciesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Quest", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Location")
                        .WithMany("Quests")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Npc", "Npc")
                        .WithMany()
                        .HasForeignKey("NpcId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.TrainerPokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("PokemonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PokeOneWeb.Data.Entities.Trainer", "Trainer")
                        .WithMany("TrainerPokemon")
                        .HasForeignKey("TrainerId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.FruitTree", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Fruit")
                        .WithMany("FruitTrees")
                        .HasForeignKey("FruitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PlacedItem", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Item", "Item")
                        .WithMany("PlacedItems")
                        .HasForeignKey("PlacedItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Portal", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Location", "Target")
                        .WithMany()
                        .HasForeignKey("TargetLocationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.PokemonNpc", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.PokemonSpecies", "PokemonSpecies")
                        .WithMany("PokemonNpcs")
                        .HasForeignKey("PokemonNpcSpeciesId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.Tutor", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Move", "TaughtMove")
                        .WithMany()
                        .HasForeignKey("TutorTaughtMoveId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.BossPokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("BossPokemonPokemonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("PokeOneWeb.Data.Entities.StaticPokemon", b =>
                {
                    b.HasOne("PokeOneWeb.Data.Entities.Pokemon", "Pokemon")
                        .WithMany()
                        .HasForeignKey("StaticPokemonPokemonId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
